module.exports = {
  rules: {
    // Strict Mode
    // This rule is aimed at controlling how Use Strict Directives are used in code.
    // Require 'use strict' to be present at module-level scope
    strict: [2, 'global'],

    // Enforce Return After Callback
    // This rule is aimed at ensuring that callbacks used outside of the main function block are
    // always part-of or immediately preceding a return statement.
    'callback-return': [2, [
      // The following variables will be considered callbacks. More can be added as necessary.
      'cb',
      'callback',
      'next',
      'done'
    ]],

    // Enforce `require()` on the top-level module scope
    // It's arguably harder to identify dependencies when they are deeply nested inside of functions
    // and other statements. Since require() does a synchronous load, it can cause performance
    // problems when used in other locations.
    'global-require': 1,

    // Disallow Synchronous Methods
    // This rule is aimed at preventing synchronous methods from being called in Node.js. It looks
    // specifically for the method suffix "Sync" (as is the convention with Node.js operations).
    'no-sync': 1,

    // Disallow process.env
    // This rule is aimed at discouraging use of process.env to avoid global dependencies throughout
    // the project's codebase.
    //
    // Note: Env vars are a great way of managing configuration options. This rule can be safely
    // turned off for a particular file/folder where project configuration is gathered and stored in
    // custom configuration objects which you then use throughout your app, but the use of
    // process.env outside of preparing configuration data should be discouraged.
    'no-process-env': 1,
    // Disallow new require
    // This rule aims to eliminate use of the `new require` expression.
    'no-new-require': 2,

    // Enforce Callback Error Handling
    // This rule expects that when you're using the callback pattern in node you'll handle the
    // error. Matches: err, Err, error, someErr, someError, any_error, ...
    'handle-callback-err': [2, '^.*(e|E)rr(or)?'],

    // Disallow string concatenation when using _dirname and _filename
    // This rule aims to prevent string concatenation of directory paths in Node.js to make sure
    // developers use a platform-independent way of creating paths (we feel you, Windows).
    'no-path-concat': 2,

    // Disallow `process.exit()`
    // It's better to throw an error and allow the application to handle it appropriately. Unhandled
    // errors always exit the process, but contrary to `process.exit()` they also print a stack
    // trace.
    'no-process-exit': 2,

    // Enforce usage of the rest parameters instead of the weird `arguments`
    'prefer-rest-params': 2
  }
}
