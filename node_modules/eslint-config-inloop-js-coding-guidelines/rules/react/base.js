module.exports = {

  parserOptions: {
    sourceType: 'module',
    ecmaFeatures: {
      jsx: true
    }
  },

  plugins: [
    'eslint-plugin-react'
  ],

  extends: './styles.js',

  rules: {

    // Forbid certain propTypes
    // This rule checks all JSX components and verifies that no forbidden propsTypes are used.
    'react/forbid-prop-types': 0,

    // Prevent usage of setState
    'react/no-set-state': 0,

    // Prevent using string references
    'react/no-string-refs': 0,

    // Enforce propTypes declarations alphabetical sorting
    'react/sort-prop-types': 0,

    // Enforce event handler naming conventions in JSX
    'react/jsx-handler-names': 0,

    // Detect missing key prop
    'react/jsx-key': 0,

    // Limit maximum of props on a single line in JSX
    'react/max-props-per-line': 0,

    // Prevent usage of unwrapped JSX strings
    'react/jsx-no-literals': 0,

    // Enforce boolean attributes notation in JSX
    // In JSX when using a boolean attribute you can set the attribute value to true or omit the
    // value. This rule will enforce one or the other to keep consistency in your code.
    'react/jsx-boolean-value': [1, 'never'],

    // Prevent missing displayName in a React component definition
    'react/display-name': 1,

    // Prevent multiple component definitions per file
    'react/no-multi-comp': [1, {
      ignoreStateless: true
    }],

    // Prevent extra closing tags for components without children
    'react/self-closing-comp': 1,

    // Enforce ES6 class for React Components
    'react/prefer-es6-class': 2,

    // Enforce stateless React Components to be written as a pure function
    // Stateless functional components are more simple than class based components and will benefit
    // from future React performance optimizations specific to these components.
    'react/prefer-stateless-function': 1,

    // Prevent usage of dangerous JSX properties
    'react/no-danger': 1,

    // Prevent usage of deprecated methods
    'react/no-deprecated': 1,

    // Restrict file extensions that may be required
    // require() statements should generally not include a file extension as there is a well defined
    // mechanism for resolving a module ID to a specific file. This rule inspects the module ID
    // being required and creates a warning if the ID contains a '.jsx' file extension.
    'react/require-extension': 'off',

    // Prevent missing parentheses around multiline JSX
    // Wrapping multiline JSX in parentheses can improve readability and/or convenience.
    'react/jsx-wrap-multilines': [1, {
      declaration: true,
      assignment: true,
      return: true
    }],
    'react/jsx-no-bind': [2, {
      ignoreRefs: true,
      allowArrowFunctions: true
    }],

    // Prevent duplicate properties in JSX
    // Creating JSX elements with duplicate props can cause unexpected behavior in your application.
    'react/jsx-no-duplicate-props': 2,

    // Disallow undeclared variables in JSX
    // This rules can help you locate potential ReferenceErrors resulting from misspellings or
    // missing components.
    'react/jsx-no-undef': 2,

    // Prevent React to be incorrectly marked as unused
    'react/jsx-uses-react': 2,

    // Prevent variables used in JSX to be incorrectly marked as unused
    'react/jsx-uses-vars': 2,

    // Prevent usage of setState in componentDidMount
    'react/no-did-mount-set-state': 2,

    // Prevent usage of setState in componentDidUpdate
    'react/no-did-update-set-state': 2,

    // Prevent direct mutation of this.state
    'react/no-direct-mutation-state': 2,

    // Prevent usage of isMounted
    // isMounted is an anti-pattern, is not available when using ES6 classes, and it is on its way
    // to being officially deprecated.
    'react/no-is-mounted': 2,

    // Prevent usage of unknown DOM property
    // In JSX all DOM properties and attributes should be camelCased to be consistent with standard
    // JavaScript style. This can be a possible source of error if you are used to writing plain
    // HTML.
    'react/no-unknown-property': 2,

    // Prevent missing props validation in a React component definition
    // PropTypes improve the reusability of your component by validating the received data. It can
    // warn other developers if they make a mistake while reusing the component with improper data
    // type.
    'react/prop-types': 2,

    // Prevent missing React when using JSX
    // When using JSX, <a /> expands to React.createElement("a"). Therefore the React variable must
    // be in scope.
    'react/react-in-jsx-scope': 2
  }
}
