'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.default = reducer;
exports.getDemands = getDemands;
exports.getDemand = getDemand;
exports.createDemand = createDemand;
exports.editDemand = editDemand;
exports.deleteDemand = deleteDemand;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var GET_DEMANDS = 'api/demands/GET_DEMANDS';
var GET_DEMANDS_SUCCESS = 'api/demands/GET_DEMANDS_SUCCESS';
var GET_DEMANDS_FAIL = 'api/demands/GET_DEMANDS_FAIL';

var initialState = {
  getDemands: {
    success: false,
    isLoading: false,
    error: null,
    data: []
  }
};

function reducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  switch (action.type) {
    // ------------------------------------
    // GET ALL DEMANDS
    // ------------------------------------
    case GET_DEMANDS:
      return (0, _extends3.default)({}, state, {
        getDemands: (0, _extends3.default)({}, state.getDemands, {
          isLoading: true,
          data: []
        })
      });
    case GET_DEMANDS_SUCCESS:
      return (0, _extends3.default)({}, state, {
        getDemands: (0, _extends3.default)({}, state.getDemands, {
          isLoading: false,
          success: true,
          data: action.result
        })
      });
    case GET_DEMANDS_FAIL:
      return (0, _extends3.default)({}, state, {
        getDemands: (0, _extends3.default)({}, state.getDemands, {
          isLoading: false,
          error: 'ERR GET_DEMANDS'
        })
      });
    // ------------------------------------
    // GET DEMAND
    // ------------------------------------
    case GET_COMPANY:
      return (0, _extends3.default)({}, state, {
        getDemand: (0, _extends3.default)({}, state.getDemand, {
          isLoading: true,
          data: null
        })
      });
    case GET_COMPANY_SUCCESS:
      return (0, _extends3.default)({}, state, {
        getDemand: (0, _extends3.default)({}, state.getDemand, {
          isLoading: false,
          success: true,
          data: action.result
        })
      });
    case GET_COMPANY_FAIL:
      return (0, _extends3.default)({}, state, {
        getDemand: (0, _extends3.default)({}, state.getDemand, {
          isLoading: false,
          error: 'ERR GET_COMPANY'
        })
      });
    // ------------------------------------
    // CREATE DEMAND
    // ------------------------------------
    case CREATE_COMPANY:
      return (0, _extends3.default)({}, state, {
        createDemand: (0, _extends3.default)({}, state.createDemand, {
          isSubmitting: true
        })
      });

    case CREATE_COMPANY_SUCCESS:
      return (0, _extends3.default)({}, state, {
        createDemand: (0, _extends3.default)({}, state.createDemand, {
          isSubmitting: false,
          success: true
        })
      });

    case CREATE_COMPANY_FAIL:
      return (0, _extends3.default)({}, state, {
        createDemand: (0, _extends3.default)({}, state.createDemand, {
          isSubmitting: false,
          error: 'ERR POST CREATE_COMPANY'
        })
      });
    default:
      return state;
  }
}

function getDemands() {
  return {
    types: [GET_DEMANDS, GET_DEMANDS_SUCCESS, GET_DEMANDS_FAIL],
    promise: function promise(client) {
      return client.get('api/demands');
    }
  };
}

function getDemand(id) {
  return {
    types: [GET_COMPANY, GET_COMPANY_SUCCESS, GET_COMPANY_FAIL],
    promise: function promise(client) {
      return client.get('api/demands/' + id);
    }
  };
}

function createDemand(data) {
  return {
    types: [CREATE_COMPANY, CREATE_COMPANY_SUCCESS, CREATE_COMPANY_FAIL],
    promise: function promise(client) {
      return client.post('api/demands', { data: data });
    }
  };
}

function editDemand(data, companyId) {
  return {
    types: [EDIT_COMPANY, EDIT_COMPANY_SUCCESS, EDIT_COMPANY_FAIL],
    promise: function promise(client) {
      return client.put('api/demands/' + companyId, { data: data });
    }
  };
}

function deleteDemand(companyId) {
  return {
    types: [DELETE_COMPANY, DELETE_COMPANY_SUCCESS, DELETE_COMPANY_FAIL],
    promise: function promise(client) {
      return client.del('api/demands/' + companyId);
    }
  };
}